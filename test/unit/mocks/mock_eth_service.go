// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/eth_service.go

package mocks

import (
	"reflect"

	"github.com/LimeChain/Hederium/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockEthServicer is a mock of EthServicer interface.
type MockEthServicer struct {
	ctrl     *gomock.Controller
	recorder *MockEthServicerMockRecorder
}

// MockEthServicerMockRecorder is the mock recorder for MockEthServicer.
type MockEthServicerMockRecorder struct {
	mock *MockEthServicer
}

// NewMockEthServicer creates a new mock instance.
func NewMockEthServicer(ctrl *gomock.Controller) *MockEthServicer {
	mock := &MockEthServicer{ctrl: ctrl}
	mock.recorder = &MockEthServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthServicer) EXPECT() *MockEthServicerMockRecorder {
	return m.recorder
}

// GetBlockNumber mocks base method.
func (m *MockEthServicer) GetBlockNumber() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumber")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockNumber indicates an expected call of GetBlockNumber.
func (mr *MockEthServicerMockRecorder) GetBlockNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumber", reflect.TypeOf((*MockEthServicer)(nil).GetBlockNumber))
}

// GetLogs mocks base method.
func (m *MockEthServicer) GetLogs(logParams domain.LogParams) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", logParams)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockEthServicerMockRecorder) GetLogs(logParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockEthServicer)(nil).GetLogs), logParams)
}

// GetBlockByNumber mocks base method.
func (m *MockEthServicer) GetBlockByNumber(numberOrTag string, showDetails bool) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByNumber", numberOrTag, showDetails)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockByNumber indicates an expected call of GetBlockByNumber.
func (mr *MockEthServicerMockRecorder) GetBlockByNumber(numberOrTag, showDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByNumber", reflect.TypeOf((*MockEthServicer)(nil).GetBlockByNumber), numberOrTag, showDetails)
}

// The following methods are not used by PollerService but are required by the interface

// Call mocks base method.
func (m *MockEthServicer) Call(transaction, blockParam interface{}) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", transaction, blockParam)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockEthServicerMockRecorder) Call(transaction, blockParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockEthServicer)(nil).Call), transaction, blockParam)
}

// EstimateGas mocks base method.
func (m *MockEthServicer) EstimateGas(transaction, blockParam interface{}) (string, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", transaction, blockParam)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockEthServicerMockRecorder) EstimateGas(transaction, blockParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockEthServicer)(nil).EstimateGas), transaction, blockParam)
}

// FeeHistory mocks base method.
func (m *MockEthServicer) FeeHistory(blockCount, newestBlock string, rewardPercentiles []string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeeHistory", blockCount, newestBlock, rewardPercentiles)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// FeeHistory indicates an expected call of FeeHistory.
func (mr *MockEthServicerMockRecorder) FeeHistory(blockCount, newestBlock, rewardPercentiles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeeHistory", reflect.TypeOf((*MockEthServicer)(nil).FeeHistory), blockCount, newestBlock, rewardPercentiles)
}

// GetAccounts mocks base method.
func (m *MockEthServicer) GetAccounts() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockEthServicerMockRecorder) GetAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockEthServicer)(nil).GetAccounts))
}

// GetBalance mocks base method.
func (m *MockEthServicer) GetBalance(address, blockNumberTagOrHash string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", address, blockNumberTagOrHash)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockEthServicerMockRecorder) GetBalance(address, blockNumberTagOrHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockEthServicer)(nil).GetBalance), address, blockNumberTagOrHash)
}

// GetBlockByHash mocks base method.
func (m *MockEthServicer) GetBlockByHash(hash string, showDetails bool) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash, showDetails)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockEthServicerMockRecorder) GetBlockByHash(hash, showDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockEthServicer)(nil).GetBlockByHash), hash, showDetails)
}

// GetBlockTransactionCountByHash mocks base method.
func (m *MockEthServicer) GetBlockTransactionCountByHash(blockHash string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByHash", blockHash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockTransactionCountByHash indicates an expected call of GetBlockTransactionCountByHash.
func (mr *MockEthServicerMockRecorder) GetBlockTransactionCountByHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByHash", reflect.TypeOf((*MockEthServicer)(nil).GetBlockTransactionCountByHash), blockHash)
}

// GetBlockTransactionCountByNumber mocks base method.
func (m *MockEthServicer) GetBlockTransactionCountByNumber(blockNumberOrTag string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionCountByNumber", blockNumberOrTag)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetBlockTransactionCountByNumber indicates an expected call of GetBlockTransactionCountByNumber.
func (mr *MockEthServicerMockRecorder) GetBlockTransactionCountByNumber(blockNumberOrTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionCountByNumber", reflect.TypeOf((*MockEthServicer)(nil).GetBlockTransactionCountByNumber), blockNumberOrTag)
}

// GetChainId mocks base method.
func (m *MockEthServicer) GetChainId() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainId")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetChainId indicates an expected call of GetChainId.
func (mr *MockEthServicerMockRecorder) GetChainId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainId", reflect.TypeOf((*MockEthServicer)(nil).GetChainId))
}

// GetCode mocks base method.
func (m *MockEthServicer) GetCode(address, blockNumberOrTag string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", address, blockNumberOrTag)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockEthServicerMockRecorder) GetCode(address, blockNumberOrTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockEthServicer)(nil).GetCode), address, blockNumberOrTag)
}

// GetGasPrice mocks base method.
func (m *MockEthServicer) GetGasPrice() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasPrice")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetGasPrice indicates an expected call of GetGasPrice.
func (mr *MockEthServicerMockRecorder) GetGasPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPrice", reflect.TypeOf((*MockEthServicer)(nil).GetGasPrice))
}

// GetStorageAt mocks base method.
func (m *MockEthServicer) GetStorageAt(address, slot, blockNumberOrHash string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageAt", address, slot, blockNumberOrHash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetStorageAt indicates an expected call of GetStorageAt.
func (mr *MockEthServicerMockRecorder) GetStorageAt(address, slot, blockNumberOrHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageAt", reflect.TypeOf((*MockEthServicer)(nil).GetStorageAt), address, slot, blockNumberOrHash)
}

// GetTransactionByBlockHashAndIndex mocks base method.
func (m *MockEthServicer) GetTransactionByBlockHashAndIndex(blockHash, txIndex string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockHashAndIndex", blockHash, txIndex)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetTransactionByBlockHashAndIndex indicates an expected call of GetTransactionByBlockHashAndIndex.
func (mr *MockEthServicerMockRecorder) GetTransactionByBlockHashAndIndex(blockHash, txIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockHashAndIndex", reflect.TypeOf((*MockEthServicer)(nil).GetTransactionByBlockHashAndIndex), blockHash, txIndex)
}

// GetTransactionByBlockNumberAndIndex mocks base method.
func (m *MockEthServicer) GetTransactionByBlockNumberAndIndex(blockNumberOrTag, txIndex string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByBlockNumberAndIndex", blockNumberOrTag, txIndex)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetTransactionByBlockNumberAndIndex indicates an expected call of GetTransactionByBlockNumberAndIndex.
func (mr *MockEthServicerMockRecorder) GetTransactionByBlockNumberAndIndex(blockNumberOrTag, txIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByBlockNumberAndIndex", reflect.TypeOf((*MockEthServicer)(nil).GetTransactionByBlockNumberAndIndex), blockNumberOrTag, txIndex)
}

// GetTransactionByHash mocks base method.
func (m *MockEthServicer) GetTransactionByHash(hash string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", hash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockEthServicerMockRecorder) GetTransactionByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockEthServicer)(nil).GetTransactionByHash), hash)
}

// GetTransactionCount mocks base method.
func (m *MockEthServicer) GetTransactionCount(address, blockNumberOrTag string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", address, blockNumberOrTag)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockEthServicerMockRecorder) GetTransactionCount(address, blockNumberOrTag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockEthServicer)(nil).GetTransactionCount), address, blockNumberOrTag)
}

// GetTransactionReceipt mocks base method.
func (m *MockEthServicer) GetTransactionReceipt(hash string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipt", hash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetTransactionReceipt indicates an expected call of GetTransactionReceipt.
func (mr *MockEthServicerMockRecorder) GetTransactionReceipt(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipt", reflect.TypeOf((*MockEthServicer)(nil).GetTransactionReceipt), hash)
}

// GetUncleByBlockHashAndIndex mocks base method.
func (m *MockEthServicer) GetUncleByBlockHashAndIndex(blockHash, index string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleByBlockHashAndIndex", blockHash, index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetUncleByBlockHashAndIndex indicates an expected call of GetUncleByBlockHashAndIndex.
func (mr *MockEthServicerMockRecorder) GetUncleByBlockHashAndIndex(blockHash, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockHashAndIndex", reflect.TypeOf((*MockEthServicer)(nil).GetUncleByBlockHashAndIndex), blockHash, index)
}

// GetUncleByBlockNumberAndIndex mocks base method.
func (m *MockEthServicer) GetUncleByBlockNumberAndIndex(blockNumber, index string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleByBlockNumberAndIndex", blockNumber, index)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetUncleByBlockNumberAndIndex indicates an expected call of GetUncleByBlockNumberAndIndex.
func (mr *MockEthServicerMockRecorder) GetUncleByBlockNumberAndIndex(blockNumber, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleByBlockNumberAndIndex", reflect.TypeOf((*MockEthServicer)(nil).GetUncleByBlockNumberAndIndex), blockNumber, index)
}

// GetUncleCountByBlockHash mocks base method.
func (m *MockEthServicer) GetUncleCountByBlockHash(blockHash string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleCountByBlockHash", blockHash)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetUncleCountByBlockHash indicates an expected call of GetUncleCountByBlockHash.
func (mr *MockEthServicerMockRecorder) GetUncleCountByBlockHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockHash", reflect.TypeOf((*MockEthServicer)(nil).GetUncleCountByBlockHash), blockHash)
}

// GetUncleCountByBlockNumber mocks base method.
func (m *MockEthServicer) GetUncleCountByBlockNumber(blockNumber string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUncleCountByBlockNumber", blockNumber)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// GetUncleCountByBlockNumber indicates an expected call of GetUncleCountByBlockNumber.
func (mr *MockEthServicerMockRecorder) GetUncleCountByBlockNumber(blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUncleCountByBlockNumber", reflect.TypeOf((*MockEthServicer)(nil).GetUncleCountByBlockNumber), blockNumber)
}

// Hashrate mocks base method.
func (m *MockEthServicer) Hashrate() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashrate")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// Hashrate indicates an expected call of Hashrate.
func (mr *MockEthServicerMockRecorder) Hashrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashrate", reflect.TypeOf((*MockEthServicer)(nil).Hashrate))
}

// MaxPriorityFeePerGas mocks base method.
func (m *MockEthServicer) MaxPriorityFeePerGas() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxPriorityFeePerGas")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// MaxPriorityFeePerGas indicates an expected call of MaxPriorityFeePerGas.
func (mr *MockEthServicerMockRecorder) MaxPriorityFeePerGas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPriorityFeePerGas", reflect.TypeOf((*MockEthServicer)(nil).MaxPriorityFeePerGas))
}

// Mining mocks base method.
func (m *MockEthServicer) Mining() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mining")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// Mining indicates an expected call of Mining.
func (mr *MockEthServicerMockRecorder) Mining() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mining", reflect.TypeOf((*MockEthServicer)(nil).Mining))
}

// ProcessTransactionResponse mocks base method.
func (m *MockEthServicer) ProcessTransactionResponse(contractResult domain.ContractResultResponse) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransactionResponse", contractResult)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// ProcessTransactionResponse indicates an expected call of ProcessTransactionResponse.
func (mr *MockEthServicerMockRecorder) ProcessTransactionResponse(contractResult interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransactionResponse", reflect.TypeOf((*MockEthServicer)(nil).ProcessTransactionResponse), contractResult)
}

// SendRawTransaction mocks base method.
func (m *MockEthServicer) SendRawTransaction(data string) (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", data)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction.
func (mr *MockEthServicerMockRecorder) SendRawTransaction(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEthServicer)(nil).SendRawTransaction), data)
}

// Syncing mocks base method.
func (m *MockEthServicer) Syncing() (interface{}, *domain.RPCError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Syncing")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(*domain.RPCError)
	return ret0, ret1
}

// Syncing indicates an expected call of Syncing.
func (mr *MockEthServicerMockRecorder) Syncing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Syncing", reflect.TypeOf((*MockEthServicer)(nil).Syncing))
} 