// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LimeChain/Hederium/internal/service (interfaces: PollerService)

package mocks

import (
	service "github.com/LimeChain/Hederium/internal/service"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPollerService is a mock of PollerService interface
type MockPollerService struct {
	ctrl     *gomock.Controller
	recorder *MockPollerServiceMockRecorder
}

// MockPollerServiceMockRecorder is the mock recorder for MockPollerService
type MockPollerServiceMockRecorder struct {
	mock *MockPollerService
}

// NewMockPollerService creates a new mock instance
func NewMockPollerService(ctrl *gomock.Controller) *MockPollerService {
	mock := &MockPollerService{ctrl: ctrl}
	mock.recorder = &MockPollerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollerService) EXPECT() *MockPollerServiceMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPollerService) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockPollerServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPollerService)(nil).Start))
}

// Stop mocks base method
func (m *MockPollerService) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockPollerServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPollerService)(nil).Stop))
}

// AddPoll mocks base method
func (m *MockPollerService) AddPoll(tag string, callback service.PollCallback, filters *service.PollFilters) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPoll", tag, callback, filters)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPoll indicates an expected call of AddPoll
func (mr *MockPollerServiceMockRecorder) AddPoll(tag, callback, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPoll", reflect.TypeOf((*MockPollerService)(nil).AddPoll), tag, callback, filters)
}

// RemoveSubscriptionFromPoll mocks base method
func (m *MockPollerService) RemoveSubscriptionFromPoll(tag string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveSubscriptionFromPoll", tag)
}

// RemoveSubscriptionFromPoll indicates an expected call of RemoveSubscriptionFromPoll
func (mr *MockPollerServiceMockRecorder) RemoveSubscriptionFromPoll(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubscriptionFromPoll", reflect.TypeOf((*MockPollerService)(nil).RemoveSubscriptionFromPoll), tag)
}

// IsPolling mocks base method
func (m *MockPollerService) IsPolling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPolling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPolling indicates an expected call of IsPolling
func (mr *MockPollerServiceMockRecorder) IsPolling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPolling", reflect.TypeOf((*MockPollerService)(nil).IsPolling))
}

// HasPoll mocks base method
func (m *MockPollerService) HasPoll(tag string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPoll", tag)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPoll indicates an expected call of HasPoll
func (mr *MockPollerServiceMockRecorder) HasPoll(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPoll", reflect.TypeOf((*MockPollerService)(nil).HasPoll), tag)
}

// GetPoll mocks base method
func (m *MockPollerService) GetPoll(tag string) *service.Poll {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoll", tag)
	ret0, _ := ret[0].(*service.Poll)
	return ret0
}

// GetPoll indicates an expected call of GetPoll
func (mr *MockPollerServiceMockRecorder) GetPoll(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoll", reflect.TypeOf((*MockPollerService)(nil).GetPoll), tag)
} 