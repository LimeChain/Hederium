// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/hedera/mirror_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMirrorNodeClient is a mock of MirrorNodeClient interface.
type MockMirrorNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockMirrorNodeClientMockRecorder
}

// MockMirrorNodeClientMockRecorder is the mock recorder for MockMirrorNodeClient.
type MockMirrorNodeClientMockRecorder struct {
	mock *MockMirrorNodeClient
}

// NewMockMirrorNodeClient creates a new mock instance.
func NewMockMirrorNodeClient(ctrl *gomock.Controller) *MockMirrorNodeClient {
	mock := &MockMirrorNodeClient{ctrl: ctrl}
	mock.recorder = &MockMirrorNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMirrorNodeClient) EXPECT() *MockMirrorNodeClientMockRecorder {
	return m.recorder
}

// GetLatestBlock mocks base method.
func (m *MockMirrorNodeClient) GetLatestBlock() (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockMirrorNodeClientMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockMirrorNodeClient)(nil).GetLatestBlock))
}
